PROCEDURE dot_product (v1 : ARRAY_OF INTEGER, v2 : ARRAY_OF INTEGER, var ps: INTEGER)
VAR
    v1x:INTEGER:=v1[1]-v1[0]
    v2x;INTEGER:=v2[1]-v2[0]
    v1y;INTEGER:=v1[3]-v1[2]
    v2y;INTEGER:=v2[3]-v2[2]
BEGIN
   ps= (v1x*v2x)+(v1y*v2y)
   write (ps)
END
ALGORITHM Dot product
VAR
    vecteur_1 : ARRAY_OF INTEGER
    vecteur_2 : ARRAY_OF INTEGER
    result:INTEGER:=0
    i:INTEGER
BEGIN
FOR i FROM 0 TO length(vecteur_1)-1 STEP 1  DO
 read (vecteur_1,vecteur_2)
 Dot product(vecteur_1,vecteur_2, result)
 END_FOR
    IF (result=0) THEN
        write("vecteur 1 et vecteur 2 sont orthogonaux")
    ELSE
        write ("vecteur 1 et vecteur 2 ne sont pas orthogonaux")
    END_IF

 write (result)
END
//function
FUNCTION dot_product ( v1 : ARRAY_OF INTEGER, v2 : ARRAY_OF INTEGER) : INTEGER
VAR
    v1x:INTEGER:=v1[1]-v1[0]
    v2x;INTEGER:=v2[1]-v2[0]
    v1y;INTEGER:=v1[3]-v1[2]
    v2y;INTEGER:=v2[3]-v2[2]
BEGIN
    v= (v1x*v2x)+(v1y*v2y)
    RETURN v ;
END
ALGORITHM Dot product
VAR
    vecteur_1 : ARRAY_OF INTEGER
    vecteur_2 : ARRAY_OF INTEGER
    result:INTEGER:=0
    i:INTEGER
BEGIN
FOR i FROM 0 TO length(vecteur_1)-1 STEP 1  DO
     read (vecteur_1,vecteur_2)
     result:= Dot product(vecteur_1,vecteur_2)
 END_FOR
    IF (result=0) THEN
        write("vecteur 1 et vecteur 2 sont orthogonaux")
    ELSE
        write ("vecteur 1 et vecteur 2 ne sont pas orthogonaux")
    END_IF

 write (result)
END